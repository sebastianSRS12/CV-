generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
   id            String        @id @default(cuid())
   name          String?
   email         String        @unique
   emailVerified DateTime?
   image         String?
   createdAt     DateTime      @default(now())
   updatedAt     DateTime      @updatedAt
   accounts      Account[]
   sessions      Session[]
   cvs           CV[]
   coverLetters  CoverLetter[]

   @@index([email])
   @@index([createdAt])
 }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
  @@index([sessionToken])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CV {
   id          String   @id @default(cuid())
   userId      String
   title       String
   slug        String   @unique
   content     Json
   isPublic    Boolean  @default(false)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@index([userId])
   @@index([slug])
   @@index([isPublic])
   @@index([createdAt])
   @@index([updatedAt])
   @@index([userId, isPublic])
 }

model CoverLetter {
   id          String   @id @default(cuid())
   userId      String
   title       String
   slug        String   @unique
   templateId  String
   content     Json
   isDraft     Boolean  @default(true)
   isPublic    Boolean  @default(false)
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@index([userId])
   @@index([slug])
   @@index([isDraft])
   @@index([isPublic])
   @@index([createdAt])
   @@index([updatedAt])
   @@index([userId, isDraft])
   @@index([userId, isPublic])
 }
